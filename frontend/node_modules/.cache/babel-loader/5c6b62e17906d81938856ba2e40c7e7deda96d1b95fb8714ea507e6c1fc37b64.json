{"ast":null,"code":"var _jsxFileName = \"/Users/rahul/Desktop/auditly/frontend/src/pages/UploadImagesPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../styles/UploadImagesPage.css\";\n\n// const UploadImagesPage = () => {\n//     const [id, setId] = useState(\"\");\n//     const [frontImage, setFrontImage] = useState(null);\n//     const [backImage, setBackImage] = useState(null);\n//     const [notification, setNotification] = useState(\"\");\n//     const [isUploadSuccessful, setIsUploadSuccessful] = useState(false);\n\n//     const navigate = useNavigate();\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n\n//         if (!id || !frontImage || !backImage) {\n//             setNotification(\"Please provide an ID and both images.\");\n//             setIsUploadSuccessful(false);\n//             setTimeout(() => setNotification(\"\"), 1500); // Clear after 1.5 seconds\n//             return;\n//         }\n\n//         const formData = new FormData();\n//         formData.append(\"front_image\", frontImage);\n//         formData.append(\"back_image\", backImage);\n\n//         try {\n//             const response = await axios.post(\n//                 `http://localhost:8000/upload-customer-images?id=${id}`,\n//                 formData,\n//                 { headers: { \"Content-Type\": \"multipart/form-data\" } }\n//             );\n\n//             if (response.status === 200) {\n//                 setNotification(\"Images uploaded successfully!\");\n//                 setIsUploadSuccessful(true);\n//             } else {\n//                 setNotification(\"Failed to upload images. Please try again.\");\n//                 setIsUploadSuccessful(false);\n//             }\n//         } catch (error) {\n//             console.error(\"Error uploading images:\", error.response?.data || error);\n//             setNotification(\"An unexpected error occurred while uploading images.\");\n//             setIsUploadSuccessful(false);\n//         }\n\n//         setTimeout(() => setNotification(\"\"), 1500); // Clear notification\n//     };\n\n//     const handleBack = () => {\n//         window.history.back(); // Navigate back to the previous page\n//     };\n\n//     const handleProceed = () => {\n//         navigate(`/compare-images?customerId=${id}`);\n//     };\n\n//     return (\n//         <div className=\"upload-images-page\">\n//             <h1>Upload Images</h1>\n//             <form onSubmit={handleSubmit} className=\"upload-form\">\n//                 <div className=\"form-group\">\n//                     <label htmlFor=\"id\">Customer ID:</label>\n//                     <input\n//                         type=\"text\"\n//                         id=\"id\"\n//                         value={id}\n//                         onChange={(e) => setId(e.target.value)}\n//                         placeholder=\"Enter Customer ID\"\n//                         required\n//                     />\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label htmlFor=\"front-image\">Front Image:</label>\n//                     <input\n//                         type=\"file\"\n//                         id=\"front-image\"\n//                         accept=\"image/*\"\n//                         onChange={(e) => setFrontImage(e.target.files[0])}\n//                         required\n//                     />\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label htmlFor=\"back-image\">Back Image:</label>\n//                     <input\n//                         type=\"file\"\n//                         id=\"back-image\"\n//                         accept=\"image/*\"\n//                         onChange={(e) => setBackImage(e.target.files[0])}\n//                         required\n//                     />\n//                 </div>\n//                 <button type=\"submit\" className=\"button upload-button\">\n//                     Upload Images\n//                 </button>\n//             </form>\n//             <div className=\"button-container\">\n//                 <button className=\"button back-button\" onClick={handleBack}>\n//                     Back\n//                 </button>\n//                 <button\n//                     className=\"button proceed-button\"\n//                     onClick={handleProceed}\n//                     disabled={!isUploadSuccessful}\n//                 >\n//                     Next\n//                 </button>\n//             </div>\n//             {notification && <div className=\"notification\">{notification}</div>}\n//         </div>\n//     );\n// };\n\n// export default UploadImagesPage;\n\nimport React, { useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { InspectionContext } from \"../context/InspectionContext\";\nimport \"../styles/UploadImagesPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadImagesPage = () => {\n  _s();\n  const {\n    inspectionData,\n    customerItemId\n  } = useContext(InspectionContext); // Access context\n  const [frontImage, setFrontImage] = useState(null);\n  const [backImage, setBackImage] = useState(null);\n  const [notification, setNotification] = useState(\"\");\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"customer_item_data_id\", customerItemId); // ID from context\n    formData.append(\"front_image\", frontImage);\n    formData.append(\"back_image\", backImage);\n\n    // Append boolean values\n    Object.entries(inspectionData).forEach(([key, value]) => {\n      formData.append(key, value);\n    });\n    try {\n      const response = await axios.post(\"http://localhost:8000/upload-customer-images\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      setNotification(\"Upload successful!\");\n    } catch (err) {\n      console.error(err);\n      setNotification(\"Failed to upload.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-images-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => setFrontImage(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => setBackImage(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadImagesPage, \"pME/Mc1gTZ54PE2GiOfpMSU21l0=\");\n_c = UploadImagesPage;\nexport default UploadImagesPage;\nvar _c;\n$RefreshReg$(_c, \"UploadImagesPage\");","map":{"version":3,"names":["React","useState","useContext","axios","InspectionContext","jsxDEV","_jsxDEV","UploadImagesPage","_s","inspectionData","customerItemId","frontImage","setFrontImage","backImage","setBackImage","notification","setNotification","handleSubmit","e","preventDefault","formData","FormData","append","Object","entries","forEach","key","value","response","post","headers","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","target","files","_c","$RefreshReg$"],"sources":["/Users/rahul/Desktop/auditly/frontend/src/pages/UploadImagesPage.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../styles/UploadImagesPage.css\";\n\n// const UploadImagesPage = () => {\n//     const [id, setId] = useState(\"\");\n//     const [frontImage, setFrontImage] = useState(null);\n//     const [backImage, setBackImage] = useState(null);\n//     const [notification, setNotification] = useState(\"\");\n//     const [isUploadSuccessful, setIsUploadSuccessful] = useState(false);\n\n//     const navigate = useNavigate();\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n\n//         if (!id || !frontImage || !backImage) {\n//             setNotification(\"Please provide an ID and both images.\");\n//             setIsUploadSuccessful(false);\n//             setTimeout(() => setNotification(\"\"), 1500); // Clear after 1.5 seconds\n//             return;\n//         }\n\n//         const formData = new FormData();\n//         formData.append(\"front_image\", frontImage);\n//         formData.append(\"back_image\", backImage);\n\n//         try {\n//             const response = await axios.post(\n//                 `http://localhost:8000/upload-customer-images?id=${id}`,\n//                 formData,\n//                 { headers: { \"Content-Type\": \"multipart/form-data\" } }\n//             );\n\n//             if (response.status === 200) {\n//                 setNotification(\"Images uploaded successfully!\");\n//                 setIsUploadSuccessful(true);\n//             } else {\n//                 setNotification(\"Failed to upload images. Please try again.\");\n//                 setIsUploadSuccessful(false);\n//             }\n//         } catch (error) {\n//             console.error(\"Error uploading images:\", error.response?.data || error);\n//             setNotification(\"An unexpected error occurred while uploading images.\");\n//             setIsUploadSuccessful(false);\n//         }\n\n//         setTimeout(() => setNotification(\"\"), 1500); // Clear notification\n//     };\n\n//     const handleBack = () => {\n//         window.history.back(); // Navigate back to the previous page\n//     };\n\n//     const handleProceed = () => {\n//         navigate(`/compare-images?customerId=${id}`);\n//     };\n\n//     return (\n//         <div className=\"upload-images-page\">\n//             <h1>Upload Images</h1>\n//             <form onSubmit={handleSubmit} className=\"upload-form\">\n//                 <div className=\"form-group\">\n//                     <label htmlFor=\"id\">Customer ID:</label>\n//                     <input\n//                         type=\"text\"\n//                         id=\"id\"\n//                         value={id}\n//                         onChange={(e) => setId(e.target.value)}\n//                         placeholder=\"Enter Customer ID\"\n//                         required\n//                     />\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label htmlFor=\"front-image\">Front Image:</label>\n//                     <input\n//                         type=\"file\"\n//                         id=\"front-image\"\n//                         accept=\"image/*\"\n//                         onChange={(e) => setFrontImage(e.target.files[0])}\n//                         required\n//                     />\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label htmlFor=\"back-image\">Back Image:</label>\n//                     <input\n//                         type=\"file\"\n//                         id=\"back-image\"\n//                         accept=\"image/*\"\n//                         onChange={(e) => setBackImage(e.target.files[0])}\n//                         required\n//                     />\n//                 </div>\n//                 <button type=\"submit\" className=\"button upload-button\">\n//                     Upload Images\n//                 </button>\n//             </form>\n//             <div className=\"button-container\">\n//                 <button className=\"button back-button\" onClick={handleBack}>\n//                     Back\n//                 </button>\n//                 <button\n//                     className=\"button proceed-button\"\n//                     onClick={handleProceed}\n//                     disabled={!isUploadSuccessful}\n//                 >\n//                     Next\n//                 </button>\n//             </div>\n//             {notification && <div className=\"notification\">{notification}</div>}\n//         </div>\n//     );\n// };\n\n// export default UploadImagesPage;\n\nimport React, { useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { InspectionContext } from \"../context/InspectionContext\";\nimport \"../styles/UploadImagesPage.css\";\n\nconst UploadImagesPage = () => {\n  const { inspectionData, customerItemId } = useContext(InspectionContext); // Access context\n  const [frontImage, setFrontImage] = useState(null);\n  const [backImage, setBackImage] = useState(null);\n  const [notification, setNotification] = useState(\"\");\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const formData = new FormData();\n    formData.append(\"customer_item_data_id\", customerItemId); // ID from context\n    formData.append(\"front_image\", frontImage);\n    formData.append(\"back_image\", backImage);\n\n    // Append boolean values\n    Object.entries(inspectionData).forEach(([key, value]) => {\n      formData.append(key, value);\n    });\n\n    try {\n      const response = await axios.post(\"http://localhost:8000/upload-customer-images\", formData, {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      });\n      setNotification(\"Upload successful!\");\n    } catch (err) {\n      console.error(err);\n      setNotification(\"Failed to upload.\");\n    }\n  };\n\n  return (\n    <div className=\"upload-images-page\">\n      <h1>Upload Images</h1>\n      <form onSubmit={handleSubmit}>\n        <input type=\"file\" onChange={(e) => setFrontImage(e.target.files[0])} />\n        <input type=\"file\" onChange={(e) => setBackImage(e.target.files[0])} />\n        <button type=\"submit\">Upload</button>\n      </form>\n      {notification && <p>{notification}</p>}\n    </div>\n  );\n};\n\nexport default UploadImagesPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}