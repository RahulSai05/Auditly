{"ast":null,"code":"var _jsxFileName = \"/Users/rahul/Desktop/auditly/frontend/src/pages/UploadImagesPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../styles/UploadImagesPage.css\";\n\n// const UploadImagesPage = () => {\n//     const [id, setId] = useState(\"\");\n//     const [frontImage, setFrontImage] = useState(null);\n//     const [backImage, setBackImage] = useState(null);\n//     const [notification, setNotification] = useState(\"\");\n//     const [isUploadSuccessful, setIsUploadSuccessful] = useState(false);\n\n//     const navigate = useNavigate();\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n\n//         if (!id || !frontImage || !backImage) {\n//             setNotification(\"Please provide an ID and both images.\");\n//             setIsUploadSuccessful(false);\n//             setTimeout(() => setNotification(\"\"), 1500); // Clear after 1.5 seconds\n//             return;\n//         }\n\n//         const formData = new FormData();\n//         formData.append(\"front_image\", frontImage);\n//         formData.append(\"back_image\", backImage);\n\n//         try {\n//             const response = await axios.post(\n//                 `http://localhost:8000/upload-customer-images?id=${id}`,\n//                 formData,\n//                 { headers: { \"Content-Type\": \"multipart/form-data\" } }\n//             );\n\n//             if (response.status === 200) {\n//                 setNotification(\"Images uploaded successfully!\");\n//                 setIsUploadSuccessful(true);\n//             } else {\n//                 setNotification(\"Failed to upload images. Please try again.\");\n//                 setIsUploadSuccessful(false);\n//             }\n//         } catch (error) {\n//             console.error(\"Error uploading images:\", error.response?.data || error);\n//             setNotification(\"An unexpected error occurred while uploading images.\");\n//             setIsUploadSuccessful(false);\n//         }\n\n//         setTimeout(() => setNotification(\"\"), 1500); // Clear notification\n//     };\n\n//     const handleBack = () => {\n//         window.history.back(); // Navigate back to the previous page\n//     };\n\n//     const handleProceed = () => {\n//         navigate(`/compare-images?customerId=${id}`);\n//     };\n\n//     return (\n//         <div className=\"upload-images-page\">\n//             <h1>Upload Images</h1>\n//             <form onSubmit={handleSubmit} className=\"upload-form\">\n//                 <div className=\"form-group\">\n//                     <label htmlFor=\"id\">Customer ID:</label>\n//                     <input\n//                         type=\"text\"\n//                         id=\"id\"\n//                         value={id}\n//                         onChange={(e) => setId(e.target.value)}\n//                         placeholder=\"Enter Customer ID\"\n//                         required\n//                     />\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label htmlFor=\"front-image\">Front Image:</label>\n//                     <input\n//                         type=\"file\"\n//                         id=\"front-image\"\n//                         accept=\"image/*\"\n//                         onChange={(e) => setFrontImage(e.target.files[0])}\n//                         required\n//                     />\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label htmlFor=\"back-image\">Back Image:</label>\n//                     <input\n//                         type=\"file\"\n//                         id=\"back-image\"\n//                         accept=\"image/*\"\n//                         onChange={(e) => setBackImage(e.target.files[0])}\n//                         required\n//                     />\n//                 </div>\n//                 <button type=\"submit\" className=\"button upload-button\">\n//                     Upload Images\n//                 </button>\n//             </form>\n//             <div className=\"button-container\">\n//                 <button className=\"button back-button\" onClick={handleBack}>\n//                     Back\n//                 </button>\n//                 <button\n//                     className=\"button proceed-button\"\n//                     onClick={handleProceed}\n//                     disabled={!isUploadSuccessful}\n//                 >\n//                     Next\n//                 </button>\n//             </div>\n//             {notification && <div className=\"notification\">{notification}</div>}\n//         </div>\n//     );\n// };\n\n// export default UploadImagesPage;\n\nimport React, { useState, useContext } from \"react\";\nimport { InspectionContext } from \"../context/InspectionContext\";\nimport axios from \"axios\";\nimport \"../styles/UploadImagesPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadImagesPage = () => {\n  _s();\n  const {\n    inspectionData,\n    customerItemId\n  } = useContext(InspectionContext); // Ensure customerItemId is from context\n  const [frontImage, setFrontImage] = useState(null);\n  const [backImage, setBackImage] = useState(null);\n  const [notification, setNotification] = useState(\"\");\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!customerItemId) {\n      setNotification(\"Customer Item ID is missing.\");\n      console.error(\"Customer Item ID is missing.\");\n      return;\n    }\n    if (!frontImage || !backImage) {\n      setNotification(\"Please upload both front and back images.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"customer_item_data_id\", customerItemId); // Add customer_item_data_id\n    Object.keys(inspectionData).forEach(key => {\n      formData.append(key, inspectionData[key]);\n    });\n    formData.append(\"front_image\", frontImage);\n    formData.append(\"back_image\", backImage);\n    try {\n      const response = await axios.post(\"http://localhost:8000/upload-customer-images\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      if (response.status === 200) {\n        setNotification(\"Images uploaded successfully!\");\n      } else {\n        setNotification(\"Failed to upload images.\");\n      }\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error uploading images:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n      setNotification(\"An unexpected error occurred.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-images-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Front Image:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: e => setFrontImage(e.target.files[0]),\n          accept: \"image/*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Back Image:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: e => setBackImage(e.target.files[0]),\n          accept: \"image/*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadImagesPage, \"pME/Mc1gTZ54PE2GiOfpMSU21l0=\");\n_c = UploadImagesPage;\nexport default UploadImagesPage;\nvar _c;\n$RefreshReg$(_c, \"UploadImagesPage\");","map":{"version":3,"names":["React","useState","useContext","InspectionContext","axios","jsxDEV","_jsxDEV","UploadImagesPage","_s","inspectionData","customerItemId","frontImage","setFrontImage","backImage","setBackImage","notification","setNotification","handleSubmit","e","preventDefault","console","error","formData","FormData","append","Object","keys","forEach","key","response","post","headers","status","_error$response","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","target","files","accept","_c","$RefreshReg$"],"sources":["/Users/rahul/Desktop/auditly/frontend/src/pages/UploadImagesPage.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../styles/UploadImagesPage.css\";\n\n// const UploadImagesPage = () => {\n//     const [id, setId] = useState(\"\");\n//     const [frontImage, setFrontImage] = useState(null);\n//     const [backImage, setBackImage] = useState(null);\n//     const [notification, setNotification] = useState(\"\");\n//     const [isUploadSuccessful, setIsUploadSuccessful] = useState(false);\n\n//     const navigate = useNavigate();\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n\n//         if (!id || !frontImage || !backImage) {\n//             setNotification(\"Please provide an ID and both images.\");\n//             setIsUploadSuccessful(false);\n//             setTimeout(() => setNotification(\"\"), 1500); // Clear after 1.5 seconds\n//             return;\n//         }\n\n//         const formData = new FormData();\n//         formData.append(\"front_image\", frontImage);\n//         formData.append(\"back_image\", backImage);\n\n//         try {\n//             const response = await axios.post(\n//                 `http://localhost:8000/upload-customer-images?id=${id}`,\n//                 formData,\n//                 { headers: { \"Content-Type\": \"multipart/form-data\" } }\n//             );\n\n//             if (response.status === 200) {\n//                 setNotification(\"Images uploaded successfully!\");\n//                 setIsUploadSuccessful(true);\n//             } else {\n//                 setNotification(\"Failed to upload images. Please try again.\");\n//                 setIsUploadSuccessful(false);\n//             }\n//         } catch (error) {\n//             console.error(\"Error uploading images:\", error.response?.data || error);\n//             setNotification(\"An unexpected error occurred while uploading images.\");\n//             setIsUploadSuccessful(false);\n//         }\n\n//         setTimeout(() => setNotification(\"\"), 1500); // Clear notification\n//     };\n\n//     const handleBack = () => {\n//         window.history.back(); // Navigate back to the previous page\n//     };\n\n//     const handleProceed = () => {\n//         navigate(`/compare-images?customerId=${id}`);\n//     };\n\n//     return (\n//         <div className=\"upload-images-page\">\n//             <h1>Upload Images</h1>\n//             <form onSubmit={handleSubmit} className=\"upload-form\">\n//                 <div className=\"form-group\">\n//                     <label htmlFor=\"id\">Customer ID:</label>\n//                     <input\n//                         type=\"text\"\n//                         id=\"id\"\n//                         value={id}\n//                         onChange={(e) => setId(e.target.value)}\n//                         placeholder=\"Enter Customer ID\"\n//                         required\n//                     />\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label htmlFor=\"front-image\">Front Image:</label>\n//                     <input\n//                         type=\"file\"\n//                         id=\"front-image\"\n//                         accept=\"image/*\"\n//                         onChange={(e) => setFrontImage(e.target.files[0])}\n//                         required\n//                     />\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label htmlFor=\"back-image\">Back Image:</label>\n//                     <input\n//                         type=\"file\"\n//                         id=\"back-image\"\n//                         accept=\"image/*\"\n//                         onChange={(e) => setBackImage(e.target.files[0])}\n//                         required\n//                     />\n//                 </div>\n//                 <button type=\"submit\" className=\"button upload-button\">\n//                     Upload Images\n//                 </button>\n//             </form>\n//             <div className=\"button-container\">\n//                 <button className=\"button back-button\" onClick={handleBack}>\n//                     Back\n//                 </button>\n//                 <button\n//                     className=\"button proceed-button\"\n//                     onClick={handleProceed}\n//                     disabled={!isUploadSuccessful}\n//                 >\n//                     Next\n//                 </button>\n//             </div>\n//             {notification && <div className=\"notification\">{notification}</div>}\n//         </div>\n//     );\n// };\n\n// export default UploadImagesPage;\n\nimport React, { useState, useContext } from \"react\";\nimport { InspectionContext } from \"../context/InspectionContext\";\nimport axios from \"axios\";\nimport \"../styles/UploadImagesPage.css\";\n\nconst UploadImagesPage = () => {\n  const { inspectionData, customerItemId } = useContext(InspectionContext); // Ensure customerItemId is from context\n  const [frontImage, setFrontImage] = useState(null);\n  const [backImage, setBackImage] = useState(null);\n  const [notification, setNotification] = useState(\"\");\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!customerItemId) {\n      setNotification(\"Customer Item ID is missing.\");\n      console.error(\"Customer Item ID is missing.\");\n      return;\n    }\n\n    if (!frontImage || !backImage) {\n      setNotification(\"Please upload both front and back images.\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"customer_item_data_id\", customerItemId); // Add customer_item_data_id\n    Object.keys(inspectionData).forEach((key) => {\n      formData.append(key, inspectionData[key]);\n    });\n    formData.append(\"front_image\", frontImage);\n    formData.append(\"back_image\", backImage);\n\n    try {\n      const response = await axios.post(\n        \"http://localhost:8000/upload-customer-images\",\n        formData,\n        {\n          headers: { \"Content-Type\": \"multipart/form-data\" },\n        }\n      );\n\n      if (response.status === 200) {\n        setNotification(\"Images uploaded successfully!\");\n      } else {\n        setNotification(\"Failed to upload images.\");\n      }\n    } catch (error) {\n      console.error(\"Error uploading images:\", error.response?.data || error);\n      setNotification(\"An unexpected error occurred.\");\n    }\n  };\n\n  return (\n    <div className=\"upload-images-page\">\n      <h1>Upload Images</h1>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>Front Image:</label>\n          <input\n            type=\"file\"\n            onChange={(e) => setFrontImage(e.target.files[0])}\n            accept=\"image/*\"\n          />\n        </div>\n        <div>\n          <label>Back Image:</label>\n          <input\n            type=\"file\"\n            onChange={(e) => setBackImage(e.target.files[0])}\n            accept=\"image/*\"\n          />\n        </div>\n        <button type=\"submit\">Upload</button>\n      </form>\n      {notification && <p>{notification}</p>}\n    </div>\n  );\n};\n\nexport default UploadImagesPage;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AACnD,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM;IAAEC,cAAc;IAAEC;EAAe,CAAC,GAAGR,UAAU,CAACC,iBAAiB,CAAC,CAAC,CAAC;EAC1E,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMgB,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI,CAACT,cAAc,EAAE;MACnBM,eAAe,CAAC,8BAA8B,CAAC;MAC/CI,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAC;MAC7C;IACF;IAEA,IAAI,CAACV,UAAU,IAAI,CAACE,SAAS,EAAE;MAC7BG,eAAe,CAAC,2CAA2C,CAAC;MAC5D;IACF;IAEA,MAAMM,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,uBAAuB,EAAEd,cAAc,CAAC,CAAC,CAAC;IAC1De,MAAM,CAACC,IAAI,CAACjB,cAAc,CAAC,CAACkB,OAAO,CAAEC,GAAG,IAAK;MAC3CN,QAAQ,CAACE,MAAM,CAACI,GAAG,EAAEnB,cAAc,CAACmB,GAAG,CAAC,CAAC;IAC3C,CAAC,CAAC;IACFN,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEb,UAAU,CAAC;IAC1CW,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAEX,SAAS,CAAC;IAExC,IAAI;MACF,MAAMgB,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,IAAI,CAC/B,8CAA8C,EAC9CR,QAAQ,EACR;QACES,OAAO,EAAE;UAAE,cAAc,EAAE;QAAsB;MACnD,CACF,CAAC;MAED,IAAIF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QAC3BhB,eAAe,CAAC,+BAA+B,CAAC;MAClD,CAAC,MAAM;QACLA,eAAe,CAAC,0BAA0B,CAAC;MAC7C;IACF,CAAC,CAAC,OAAOK,KAAK,EAAE;MAAA,IAAAY,eAAA;MACdb,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAE,EAAAY,eAAA,GAAAZ,KAAK,CAACQ,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBC,IAAI,KAAIb,KAAK,CAAC;MACvEL,eAAe,CAAC,+BAA+B,CAAC;IAClD;EACF,CAAC;EAED,oBACEV,OAAA;IAAK6B,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBACjC9B,OAAA;MAAA8B,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBlC,OAAA;MAAMmC,QAAQ,EAAExB,YAAa;MAAAmB,QAAA,gBAC3B9B,OAAA;QAAA8B,QAAA,gBACE9B,OAAA;UAAA8B,QAAA,EAAO;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC3BlC,OAAA;UACEoC,IAAI,EAAC,MAAM;UACXC,QAAQ,EAAGzB,CAAC,IAAKN,aAAa,CAACM,CAAC,CAAC0B,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAE;UAClDC,MAAM,EAAC;QAAS;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNlC,OAAA;QAAA8B,QAAA,gBACE9B,OAAA;UAAA8B,QAAA,EAAO;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC1BlC,OAAA;UACEoC,IAAI,EAAC,MAAM;UACXC,QAAQ,EAAGzB,CAAC,IAAKJ,YAAY,CAACI,CAAC,CAAC0B,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAE;UACjDC,MAAM,EAAC;QAAS;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNlC,OAAA;QAAQoC,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,EACNzB,YAAY,iBAAIT,OAAA;MAAA8B,QAAA,EAAIrB;IAAY;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEV,CAAC;AAAChC,EAAA,CAzEID,gBAAgB;AAAAwC,EAAA,GAAhBxC,gBAAgB;AA2EtB,eAAeA,gBAAgB;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}